#!/usr/bin/env python3
import xml.etree.ElementTree as ET
import sys
import re

def to_pascal_case(name):
    # Uppercase characters at the beginning of the name or after a _
    name = re.sub(r'(?:^|(?<=_)).', lambda m: m.group(0).upper(), name)
    # Remove underscores
    name = name.replace('_', '')
    return name

def to_upper_snake_case(name):
    # Insert underscores before uppercase characters not at the beginning
    name = re.sub(r'(?<!^)[A-Z]', lambda m: '_' + m.group(0), name)
    # Uppercase everything
    return name.upper()

def get_enum_prefix(enum):
    if enum == 'NetworkOption':
        return 'NET_OPTION'
    if enum == 'DatabaseOption':
        return 'DB_OPTION'
    if enum == 'TransactionOption':
        return 'TR_OPTION'
    return to_upper_snake_case(enum)

def generate_enum(scope):
    enum = scope.attrib['name']
    print('#[derive(Clone, Copy)]')
    print('pub enum {enum} {{'.format(enum=enum))
    for option in scope.iter('Option'):
        if option.attrib.get('hidden') == 'true':
            continue
        opt = option.attrib['name']
        rust_opt = to_pascal_case(opt)
        print('    {rust_opt},'.format(rust_opt=rust_opt))
    print('}\n')
    print('impl {enum} {{'.format(enum=enum))
    print('    pub(crate) fn as_c_enum(self) -> fdb::FDB{enum} {{'.format(enum=enum))
    print('        use {enum}::*;'.format(enum=enum))
    print('        match self {')
    for option in scope.iter('Option'):
        if option.attrib.get('hidden') == 'true':
            continue
        opt = option.attrib['name']
        rust_opt = to_pascal_case(opt)
        c_opt = 'FDB{enum}_FDB_{prefix}_{upper_opt}'.format(enum=enum, prefix=get_enum_prefix(enum), upper_opt=opt.upper())
        print('            {rust_opt} => fdb::{c_opt},'.format(rust_opt=rust_opt, c_opt=c_opt))
    print('        }')
    print('    }')
    print('}\n')

def main():
    tree = ET.parse(sys.stdin)

    print('// Generated by gen_options, do not edit')
    print('use foundationdb_sys as fdb;\n')
    for scope in tree.iter('Scope'):
        generate_enum(scope)

if __name__ == '__main__':
    main()
