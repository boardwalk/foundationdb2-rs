// Generated by gen_options, do not edit
use foundationdb_sys as fdb;

#[derive(Clone, Copy)]
pub enum NetworkOption {
    LocalAddress,
    ClusterFile,
    TraceEnable,
    TraceRollSize,
    TraceMaxLogsSize,
    TraceLogGroup,
    TraceFormat,
    Knob,
    TLSPlugin,
    TLSCertBytes,
    TLSCertPath,
    TLSKeyBytes,
    TLSKeyPath,
    TLSVerifyPeers,
    BuggifyEnable,
    BuggifyDisable,
    BuggifySectionActivatedProbability,
    BuggifySectionFiredProbability,
    TLSCaBytes,
    TLSCaPath,
    TLSPassword,
    DisableMultiVersionClientApi,
    CallbacksOnExternalThreads,
    ExternalClientLibrary,
    ExternalClientDirectory,
    DisableLocalClient,
    DisableClientStatisticsLogging,
    EnableSlowTaskProfiling,
}

impl NetworkOption {
    pub(crate) fn as_c_enum(self) -> fdb::FDBNetworkOption {
        use NetworkOption::*;
        match self {
            LocalAddress => fdb::FDBNetworkOption_FDB_NET_OPTION_LOCAL_ADDRESS,
            ClusterFile => fdb::FDBNetworkOption_FDB_NET_OPTION_CLUSTER_FILE,
            TraceEnable => fdb::FDBNetworkOption_FDB_NET_OPTION_TRACE_ENABLE,
            TraceRollSize => fdb::FDBNetworkOption_FDB_NET_OPTION_TRACE_ROLL_SIZE,
            TraceMaxLogsSize => fdb::FDBNetworkOption_FDB_NET_OPTION_TRACE_MAX_LOGS_SIZE,
            TraceLogGroup => fdb::FDBNetworkOption_FDB_NET_OPTION_TRACE_LOG_GROUP,
            TraceFormat => fdb::FDBNetworkOption_FDB_NET_OPTION_TRACE_FORMAT,
            Knob => fdb::FDBNetworkOption_FDB_NET_OPTION_KNOB,
            TLSPlugin => fdb::FDBNetworkOption_FDB_NET_OPTION_TLS_PLUGIN,
            TLSCertBytes => fdb::FDBNetworkOption_FDB_NET_OPTION_TLS_CERT_BYTES,
            TLSCertPath => fdb::FDBNetworkOption_FDB_NET_OPTION_TLS_CERT_PATH,
            TLSKeyBytes => fdb::FDBNetworkOption_FDB_NET_OPTION_TLS_KEY_BYTES,
            TLSKeyPath => fdb::FDBNetworkOption_FDB_NET_OPTION_TLS_KEY_PATH,
            TLSVerifyPeers => fdb::FDBNetworkOption_FDB_NET_OPTION_TLS_VERIFY_PEERS,
            BuggifyEnable => fdb::FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_ENABLE,
            BuggifyDisable => fdb::FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_DISABLE,
            BuggifySectionActivatedProbability => fdb::FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_SECTION_ACTIVATED_PROBABILITY,
            BuggifySectionFiredProbability => fdb::FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_SECTION_FIRED_PROBABILITY,
            TLSCaBytes => fdb::FDBNetworkOption_FDB_NET_OPTION_TLS_CA_BYTES,
            TLSCaPath => fdb::FDBNetworkOption_FDB_NET_OPTION_TLS_CA_PATH,
            TLSPassword => fdb::FDBNetworkOption_FDB_NET_OPTION_TLS_PASSWORD,
            DisableMultiVersionClientApi => fdb::FDBNetworkOption_FDB_NET_OPTION_DISABLE_MULTI_VERSION_CLIENT_API,
            CallbacksOnExternalThreads => fdb::FDBNetworkOption_FDB_NET_OPTION_CALLBACKS_ON_EXTERNAL_THREADS,
            ExternalClientLibrary => fdb::FDBNetworkOption_FDB_NET_OPTION_EXTERNAL_CLIENT_LIBRARY,
            ExternalClientDirectory => fdb::FDBNetworkOption_FDB_NET_OPTION_EXTERNAL_CLIENT_DIRECTORY,
            DisableLocalClient => fdb::FDBNetworkOption_FDB_NET_OPTION_DISABLE_LOCAL_CLIENT,
            DisableClientStatisticsLogging => fdb::FDBNetworkOption_FDB_NET_OPTION_DISABLE_CLIENT_STATISTICS_LOGGING,
            EnableSlowTaskProfiling => fdb::FDBNetworkOption_FDB_NET_OPTION_ENABLE_SLOW_TASK_PROFILING,
        }
    }
}

#[derive(Clone, Copy)]
pub enum DatabaseOption {
    LocationCacheSize,
    MaxWatches,
    MachineId,
    DatacenterId,
}

impl DatabaseOption {
    pub(crate) fn as_c_enum(self) -> fdb::FDBDatabaseOption {
        use DatabaseOption::*;
        match self {
            LocationCacheSize => fdb::FDBDatabaseOption_FDB_DB_OPTION_LOCATION_CACHE_SIZE,
            MaxWatches => fdb::FDBDatabaseOption_FDB_DB_OPTION_MAX_WATCHES,
            MachineId => fdb::FDBDatabaseOption_FDB_DB_OPTION_MACHINE_ID,
            DatacenterId => fdb::FDBDatabaseOption_FDB_DB_OPTION_DATACENTER_ID,
        }
    }
}

#[derive(Clone, Copy)]
pub enum TransactionOption {
    CausalWriteRisky,
    CausalReadRisky,
    CausalReadDisable,
    NextWriteNoWriteConflictRange,
    ReadYourWritesDisable,
    ReadAheadDisable,
    DurabilityDatacenter,
    DurabilityRisky,
    DurabilityDevNullIsWebScale,
    PrioritySystemImmediate,
    PriorityBatch,
    InitializeNewDatabase,
    AccessSystemKeys,
    ReadSystemKeys,
    DebugRetryLogging,
    TransactionLoggingEnable,
    Timeout,
    RetryLimit,
    MaxRetryDelay,
    SnapshotRywEnable,
    SnapshotRywDisable,
    LockAware,
    UsedDuringCommitProtectionDisable,
    ReadLockAware,
}

impl TransactionOption {
    pub(crate) fn as_c_enum(self) -> fdb::FDBTransactionOption {
        use TransactionOption::*;
        match self {
            CausalWriteRisky => fdb::FDBTransactionOption_FDB_TR_OPTION_CAUSAL_WRITE_RISKY,
            CausalReadRisky => fdb::FDBTransactionOption_FDB_TR_OPTION_CAUSAL_READ_RISKY,
            CausalReadDisable => fdb::FDBTransactionOption_FDB_TR_OPTION_CAUSAL_READ_DISABLE,
            NextWriteNoWriteConflictRange => fdb::FDBTransactionOption_FDB_TR_OPTION_NEXT_WRITE_NO_WRITE_CONFLICT_RANGE,
            ReadYourWritesDisable => fdb::FDBTransactionOption_FDB_TR_OPTION_READ_YOUR_WRITES_DISABLE,
            ReadAheadDisable => fdb::FDBTransactionOption_FDB_TR_OPTION_READ_AHEAD_DISABLE,
            DurabilityDatacenter => fdb::FDBTransactionOption_FDB_TR_OPTION_DURABILITY_DATACENTER,
            DurabilityRisky => fdb::FDBTransactionOption_FDB_TR_OPTION_DURABILITY_RISKY,
            DurabilityDevNullIsWebScale => fdb::FDBTransactionOption_FDB_TR_OPTION_DURABILITY_DEV_NULL_IS_WEB_SCALE,
            PrioritySystemImmediate => fdb::FDBTransactionOption_FDB_TR_OPTION_PRIORITY_SYSTEM_IMMEDIATE,
            PriorityBatch => fdb::FDBTransactionOption_FDB_TR_OPTION_PRIORITY_BATCH,
            InitializeNewDatabase => fdb::FDBTransactionOption_FDB_TR_OPTION_INITIALIZE_NEW_DATABASE,
            AccessSystemKeys => fdb::FDBTransactionOption_FDB_TR_OPTION_ACCESS_SYSTEM_KEYS,
            ReadSystemKeys => fdb::FDBTransactionOption_FDB_TR_OPTION_READ_SYSTEM_KEYS,
            DebugRetryLogging => fdb::FDBTransactionOption_FDB_TR_OPTION_DEBUG_RETRY_LOGGING,
            TransactionLoggingEnable => fdb::FDBTransactionOption_FDB_TR_OPTION_TRANSACTION_LOGGING_ENABLE,
            Timeout => fdb::FDBTransactionOption_FDB_TR_OPTION_TIMEOUT,
            RetryLimit => fdb::FDBTransactionOption_FDB_TR_OPTION_RETRY_LIMIT,
            MaxRetryDelay => fdb::FDBTransactionOption_FDB_TR_OPTION_MAX_RETRY_DELAY,
            SnapshotRywEnable => fdb::FDBTransactionOption_FDB_TR_OPTION_SNAPSHOT_RYW_ENABLE,
            SnapshotRywDisable => fdb::FDBTransactionOption_FDB_TR_OPTION_SNAPSHOT_RYW_DISABLE,
            LockAware => fdb::FDBTransactionOption_FDB_TR_OPTION_LOCK_AWARE,
            UsedDuringCommitProtectionDisable => fdb::FDBTransactionOption_FDB_TR_OPTION_USED_DURING_COMMIT_PROTECTION_DISABLE,
            ReadLockAware => fdb::FDBTransactionOption_FDB_TR_OPTION_READ_LOCK_AWARE,
        }
    }
}

#[derive(Clone, Copy)]
pub enum StreamingMode {
    WantAll,
    Iterator,
    Exact,
    Small,
    Medium,
    Large,
    Serial,
}

impl StreamingMode {
    pub(crate) fn as_c_enum(self) -> fdb::FDBStreamingMode {
        use StreamingMode::*;
        match self {
            WantAll => fdb::FDBStreamingMode_FDB_STREAMING_MODE_WANT_ALL,
            Iterator => fdb::FDBStreamingMode_FDB_STREAMING_MODE_ITERATOR,
            Exact => fdb::FDBStreamingMode_FDB_STREAMING_MODE_EXACT,
            Small => fdb::FDBStreamingMode_FDB_STREAMING_MODE_SMALL,
            Medium => fdb::FDBStreamingMode_FDB_STREAMING_MODE_MEDIUM,
            Large => fdb::FDBStreamingMode_FDB_STREAMING_MODE_LARGE,
            Serial => fdb::FDBStreamingMode_FDB_STREAMING_MODE_SERIAL,
        }
    }
}

#[derive(Clone, Copy)]
pub enum MutationType {
    Add,
    And,
    BitAnd,
    Or,
    BitOr,
    Xor,
    BitXor,
    AppendIfFits,
    Max,
    Min,
    SetVersionstampedKey,
    SetVersionstampedValue,
    ByteMin,
    ByteMax,
    CompareAndClear,
}

impl MutationType {
    pub(crate) fn as_c_enum(self) -> fdb::FDBMutationType {
        use MutationType::*;
        match self {
            Add => fdb::FDBMutationType_FDB_MUTATION_TYPE_ADD,
            And => fdb::FDBMutationType_FDB_MUTATION_TYPE_AND,
            BitAnd => fdb::FDBMutationType_FDB_MUTATION_TYPE_BIT_AND,
            Or => fdb::FDBMutationType_FDB_MUTATION_TYPE_OR,
            BitOr => fdb::FDBMutationType_FDB_MUTATION_TYPE_BIT_OR,
            Xor => fdb::FDBMutationType_FDB_MUTATION_TYPE_XOR,
            BitXor => fdb::FDBMutationType_FDB_MUTATION_TYPE_BIT_XOR,
            AppendIfFits => fdb::FDBMutationType_FDB_MUTATION_TYPE_APPEND_IF_FITS,
            Max => fdb::FDBMutationType_FDB_MUTATION_TYPE_MAX,
            Min => fdb::FDBMutationType_FDB_MUTATION_TYPE_MIN,
            SetVersionstampedKey => fdb::FDBMutationType_FDB_MUTATION_TYPE_SET_VERSIONSTAMPED_KEY,
            SetVersionstampedValue => fdb::FDBMutationType_FDB_MUTATION_TYPE_SET_VERSIONSTAMPED_VALUE,
            ByteMin => fdb::FDBMutationType_FDB_MUTATION_TYPE_BYTE_MIN,
            ByteMax => fdb::FDBMutationType_FDB_MUTATION_TYPE_BYTE_MAX,
            CompareAndClear => fdb::FDBMutationType_FDB_MUTATION_TYPE_COMPARE_AND_CLEAR,
        }
    }
}

#[derive(Clone, Copy)]
pub enum ConflictRangeType {
    Read,
    Write,
}

impl ConflictRangeType {
    pub(crate) fn as_c_enum(self) -> fdb::FDBConflictRangeType {
        use ConflictRangeType::*;
        match self {
            Read => fdb::FDBConflictRangeType_FDB_CONFLICT_RANGE_TYPE_READ,
            Write => fdb::FDBConflictRangeType_FDB_CONFLICT_RANGE_TYPE_WRITE,
        }
    }
}

#[derive(Clone, Copy)]
pub enum ErrorPredicate {
    Retryable,
    MaybeCommitted,
    RetryableNotCommitted,
}

impl ErrorPredicate {
    pub(crate) fn as_c_enum(self) -> fdb::FDBErrorPredicate {
        use ErrorPredicate::*;
        match self {
            Retryable => fdb::FDBErrorPredicate_FDB_ERROR_PREDICATE_RETRYABLE,
            MaybeCommitted => fdb::FDBErrorPredicate_FDB_ERROR_PREDICATE_MAYBE_COMMITTED,
            RetryableNotCommitted => fdb::FDBErrorPredicate_FDB_ERROR_PREDICATE_RETRYABLE_NOT_COMMITTED,
        }
    }
}

